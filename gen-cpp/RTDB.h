/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RTDB_H
#define RTDB_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "rtdb_types.h"

namespace rtdb {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RTDBIf {
 public:
  virtual ~RTDBIf() {}
  virtual void store(const int64_t timstamp, const int64_t value) = 0;
};

class RTDBIfFactory {
 public:
  typedef RTDBIf Handler;

  virtual ~RTDBIfFactory() {}

  virtual RTDBIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RTDBIf* /* handler */) = 0;
};

class RTDBIfSingletonFactory : virtual public RTDBIfFactory {
 public:
  RTDBIfSingletonFactory(const boost::shared_ptr<RTDBIf>& iface) : iface_(iface) {}
  virtual ~RTDBIfSingletonFactory() {}

  virtual RTDBIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RTDBIf* /* handler */) {}

 protected:
  boost::shared_ptr<RTDBIf> iface_;
};

class RTDBNull : virtual public RTDBIf {
 public:
  virtual ~RTDBNull() {}
  void store(const int64_t /* timstamp */, const int64_t /* value */) {
    return;
  }
};

typedef struct _RTDB_store_args__isset {
  _RTDB_store_args__isset() : timstamp(false), value(false) {}
  bool timstamp :1;
  bool value :1;
} _RTDB_store_args__isset;

class RTDB_store_args {
 public:

  RTDB_store_args(const RTDB_store_args&);
  RTDB_store_args& operator=(const RTDB_store_args&);
  RTDB_store_args() : timstamp(0), value(0) {
  }

  virtual ~RTDB_store_args() throw();
  int64_t timstamp;
  int64_t value;

  _RTDB_store_args__isset __isset;

  void __set_timstamp(const int64_t val);

  void __set_value(const int64_t val);

  bool operator == (const RTDB_store_args & rhs) const
  {
    if (!(timstamp == rhs.timstamp))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const RTDB_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RTDB_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RTDB_store_pargs {
 public:


  virtual ~RTDB_store_pargs() throw();
  const int64_t* timstamp;
  const int64_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class RTDBClient : virtual public RTDBIf {
 public:
  RTDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RTDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void store(const int64_t timstamp, const int64_t value);
  void send_store(const int64_t timstamp, const int64_t value);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RTDBProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RTDBIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RTDBProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RTDBProcessor(boost::shared_ptr<RTDBIf> iface) :
    iface_(iface) {
    processMap_["store"] = &RTDBProcessor::process_store;
  }

  virtual ~RTDBProcessor() {}
};

class RTDBProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RTDBProcessorFactory(const ::boost::shared_ptr< RTDBIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RTDBIfFactory > handlerFactory_;
};

class RTDBMultiface : virtual public RTDBIf {
 public:
  RTDBMultiface(std::vector<boost::shared_ptr<RTDBIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RTDBMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RTDBIf> > ifaces_;
  RTDBMultiface() {}
  void add(boost::shared_ptr<RTDBIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void store(const int64_t timstamp, const int64_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->store(timstamp, value);
    }
    ifaces_[i]->store(timstamp, value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RTDBConcurrentClient : virtual public RTDBIf {
 public:
  RTDBConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RTDBConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void store(const int64_t timstamp, const int64_t value);
  void send_store(const int64_t timstamp, const int64_t value);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
